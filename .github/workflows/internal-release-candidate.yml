on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag'
        required: true
        default: '1.0.0-rc'

jobs:
  build_web:
    runs-on: ubuntu-latest
    permissions:
      contents: 'write'
      id-token: 'write'
    env:
      IMAGE_NAME: pubsubplus-prometheus-exporter
      VAULT_ADDR: https://vault.maas-vault-prod.solace.cloud:8200
      GCLOUD_PROJECT_ID_DEV: stellar-arcadia-205014
      GCLOUD_PROJECT_ID_STAGING: gcp-maas-staging
      GCLOUD_PROJECT_ID_PROD: gcp-maas-prod

    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.20"

      - name: Check out code
        uses: actions/checkout@v2

      - name: Run Whitesource Action
        uses: SolaceDev/Mend-Scan-GHA@v1.0.0
        with:
          wssURL: https://saas.whitesourcesoftware.com/agent
          apiKey: ${{ secrets.WSS_API_KEY }}
          productName: '${{ env.IMAGE_NAME }}'
          projectName: '${{ env.IMAGE_NAME }}'
          configFile: 'ci/whitesource/whitesource-agent.config'

      - name: Generate Third Party License
        run: |
          make generate-license

      - name: Build exporter
        run: make build

      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.RELEASE_GITHUB_TOKEN }}

      - name: Build image and push GitHub Container Registry
        uses: docker/build-push-action@v2
        with:
          context: ./
          tags: |
            ghcr.io/solacedev/${{ env.IMAGE_NAME }}:${{ github.event.inputs.release_tag }}
          push: true


      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Checkout SolaceDev/maas-build-actions
        uses: actions/checkout@v2
        with:
          repository: SolaceDev/maas-build-actions
          ref: refs/heads/master
          token: ${{ secrets.RELEASE_GITHUB_TOKEN }}
          persist-credentials: false
          path: maas-build-actions

      - name: Retrieve google container registry secrets
        id: docker_registry_secrets
        uses: hashicorp/vault-action@v2.5.0
        with:
          url: "${{ env.VAULT_ADDR }}"
          role: github-docker-secrets-read-role
          method: jwt
          path: jwt-github
          jwtGithubAudience: https://github.com/SolaceDev
          exportToken: true
          secrets: |
            secret/data/development/gcp-gcr GCP_SERVICE_ACCOUNT | GCP_DEV_SERVICE_ACCOUNT;
            secret/data/staging/gcp-gcr GCP_SERVICE_ACCOUNT     | GCP_STAGE_SERVICE_ACCOUNT;
            secret/data/production/gcp-gcr GCP_SERVICE_ACCOUNT  | GCP_PROD_SERVICE_ACCOUNT

      - name: Log in to gcr development docker registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ steps.docker_registry_secrets.outputs.GCP_DEV_SERVICE_ACCOUNT }}

      - name: Build image and push Google Container Registry
        uses: docker/build-push-action@v2
        with:
          context: ./
          tags: |
            gcr.io/${{ env.GCLOUD_PROJECT_ID_DEV }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.release_tag }}
          push: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/solacedev/${{ env.IMAGE_NAME }}:${{ github.event.inputs.release_tag }}
          format: 'sarif'
          severity: 'CRITICAL,HIGH'
          output: 'trivy-results.sarif'

      - name: Uploads Trivy Scan Reports
        if: ${{ !startsWith(github.ref_name, '1.') }}
        uses: actions/upload-artifact@v2
        with:
          path: |
            trivy-results.sarif

      - name: Run Prisma Vulnerability Checker Action
        uses: ./maas-build-actions/.github/actions/prisma-vulnerability-checker
        with:
          docker_image_to_check: gcr.io/${{ env.GCLOUD_PROJECT_ID_DEV }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.release_tag }}
          prisma_repository_name: "${{ env.GCLOUD_PROJECT_ID_DEV }}/${{ env.IMAGE_NAME }}"
          project_squad: "launchpad"
          prisma_jira_check: "False"

      - name: Test image
        run: |
          pushd /tmp
          curl -s https://api.github.com/repos/redhat-openshift-ecosystem/openshift-preflight/releases/latest | grep -wo "https://.*preflight-linux-amd64" | wget -i -
          chmod +x preflight-linux-amd64
          popd
          export VERSION='${{ github.event.inputs.release_tag }}'
          export CONTAINER_TO_TEST="ghcr.io/solacedev/${{ env.IMAGE_NAME }}:$VERSION"
          echo "Testing $CONTAINER_TO_TEST"
          /tmp/preflight-linux-amd64 check container $CONTAINER_TO_TEST --docker-config ~/.docker/config.json | grep "Preflight result: PASSED" || echo

      - name: Tag same image as latest and push
        run: |
          export VERSION='${{ github.event.inputs.release_tag }}'
          # tag as latest
          PUSHED_IMAGES=`docker images | grep $VERSION`
          EXPORTER=`echo "$PUSHED_IMAGES" | grep prometheus` ; echo "$EXPORTER"   # Format: Imagepath Tag Sha
          docker tag `echo $EXPORTER | awk '{print $3}'` `echo $EXPORTER | awk '{print $1}'`:latest
          docker push `echo $EXPORTER | awk '{print $1}'`:latest

      - name: Commit changes
        uses: EndBug/add-and-commit@v9
        with:
          committer_name: GitHub Actions
          committer_email: actions@github.com
          message: 'Updated licenses [skip ci]'
          add: 'THIRD-PARTY-LICENSES.md'
          new_branch: 'ReleaseCandidate-${{ github.event.inputs.release_tag }}'

      - name: Create pull request
        run: |
          CURRENT_BRANCH=${GITHUB_REF##*/}
          gh pr create -B ${CURRENT_BRANCH} -H 'ReleaseCandidate-${{ github.event.inputs.release_tag }}' --title "Merge release prep updates into ${CURRENT_BRANCH}" --body 'Created by Github action'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
